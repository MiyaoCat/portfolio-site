'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var blocks = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.BLOCKS = void 0;
/**
 * Map of all Contentful block types. Blocks contain inline or block nodes.
 */
var BLOCKS;
(function (BLOCKS) {
    BLOCKS["DOCUMENT"] = "document";
    BLOCKS["PARAGRAPH"] = "paragraph";
    BLOCKS["HEADING_1"] = "heading-1";
    BLOCKS["HEADING_2"] = "heading-2";
    BLOCKS["HEADING_3"] = "heading-3";
    BLOCKS["HEADING_4"] = "heading-4";
    BLOCKS["HEADING_5"] = "heading-5";
    BLOCKS["HEADING_6"] = "heading-6";
    BLOCKS["OL_LIST"] = "ordered-list";
    BLOCKS["UL_LIST"] = "unordered-list";
    BLOCKS["LIST_ITEM"] = "list-item";
    BLOCKS["HR"] = "hr";
    BLOCKS["QUOTE"] = "blockquote";
    BLOCKS["EMBEDDED_ENTRY"] = "embedded-entry-block";
    BLOCKS["EMBEDDED_ASSET"] = "embedded-asset-block";
    BLOCKS["EMBEDDED_RESOURCE"] = "embedded-resource-block";
    BLOCKS["TABLE"] = "table";
    BLOCKS["TABLE_ROW"] = "table-row";
    BLOCKS["TABLE_CELL"] = "table-cell";
    BLOCKS["TABLE_HEADER_CELL"] = "table-header-cell";
})(BLOCKS = exports.BLOCKS || (exports.BLOCKS = {}));

});

unwrapExports(blocks);
var blocks_1 = blocks.BLOCKS;

var inlines = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.INLINES = void 0;
/**
 * Map of all Contentful inline types. Inline contain inline or text nodes.
 */
var INLINES;
(function (INLINES) {
    INLINES["HYPERLINK"] = "hyperlink";
    INLINES["ENTRY_HYPERLINK"] = "entry-hyperlink";
    INLINES["ASSET_HYPERLINK"] = "asset-hyperlink";
    INLINES["RESOURCE_HYPERLINK"] = "resource-hyperlink";
    INLINES["EMBEDDED_ENTRY"] = "embedded-entry-inline";
    INLINES["EMBEDDED_RESOURCE"] = "embedded-resource-inline";
})(INLINES = exports.INLINES || (exports.INLINES = {}));

});

unwrapExports(inlines);
var inlines_1 = inlines.INLINES;

var marks = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Map of all Contentful marks.
 */
var MARKS;
(function (MARKS) {
    MARKS["BOLD"] = "bold";
    MARKS["ITALIC"] = "italic";
    MARKS["UNDERLINE"] = "underline";
    MARKS["CODE"] = "code";
    MARKS["SUPERSCRIPT"] = "superscript";
    MARKS["SUBSCRIPT"] = "subscript";
})(MARKS || (MARKS = {}));
exports.default = MARKS;

});

unwrapExports(marks);

var schemaConstraints = createCommonjsModule(function (module, exports) {
var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1_MARKS = exports.V1_NODE_TYPES = exports.TEXT_CONTAINERS = exports.HEADINGS = exports.CONTAINERS = exports.VOID_BLOCKS = exports.TABLE_BLOCKS = exports.LIST_ITEM_BLOCKS = exports.TOP_LEVEL_BLOCKS = void 0;


var marks_1 = __importDefault(marks);
/**
 * Array of all top level block types.
 * Only these block types can be the direct children of the document.
 */
exports.TOP_LEVEL_BLOCKS = [
    blocks.BLOCKS.PARAGRAPH,
    blocks.BLOCKS.HEADING_1,
    blocks.BLOCKS.HEADING_2,
    blocks.BLOCKS.HEADING_3,
    blocks.BLOCKS.HEADING_4,
    blocks.BLOCKS.HEADING_5,
    blocks.BLOCKS.HEADING_6,
    blocks.BLOCKS.OL_LIST,
    blocks.BLOCKS.UL_LIST,
    blocks.BLOCKS.HR,
    blocks.BLOCKS.QUOTE,
    blocks.BLOCKS.EMBEDDED_ENTRY,
    blocks.BLOCKS.EMBEDDED_ASSET,
    blocks.BLOCKS.EMBEDDED_RESOURCE,
    blocks.BLOCKS.TABLE,
];
/**
 * Array of all allowed block types inside list items
 */
exports.LIST_ITEM_BLOCKS = [
    blocks.BLOCKS.PARAGRAPH,
    blocks.BLOCKS.HEADING_1,
    blocks.BLOCKS.HEADING_2,
    blocks.BLOCKS.HEADING_3,
    blocks.BLOCKS.HEADING_4,
    blocks.BLOCKS.HEADING_5,
    blocks.BLOCKS.HEADING_6,
    blocks.BLOCKS.OL_LIST,
    blocks.BLOCKS.UL_LIST,
    blocks.BLOCKS.HR,
    blocks.BLOCKS.QUOTE,
    blocks.BLOCKS.EMBEDDED_ENTRY,
    blocks.BLOCKS.EMBEDDED_ASSET,
    blocks.BLOCKS.EMBEDDED_RESOURCE,
];
exports.TABLE_BLOCKS = [
    blocks.BLOCKS.TABLE,
    blocks.BLOCKS.TABLE_ROW,
    blocks.BLOCKS.TABLE_CELL,
    blocks.BLOCKS.TABLE_HEADER_CELL,
];
/**
 * Array of all void block types
 */
exports.VOID_BLOCKS = [
    blocks.BLOCKS.HR,
    blocks.BLOCKS.EMBEDDED_ENTRY,
    blocks.BLOCKS.EMBEDDED_ASSET,
    blocks.BLOCKS.EMBEDDED_RESOURCE,
];
/**
 * Dictionary of all container block types, and the set block types they accept as children.
 *
 * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`
 */
exports.CONTAINERS = (_a = {},
    _a[blocks.BLOCKS.OL_LIST] = [blocks.BLOCKS.LIST_ITEM],
    _a[blocks.BLOCKS.UL_LIST] = [blocks.BLOCKS.LIST_ITEM],
    _a[blocks.BLOCKS.LIST_ITEM] = exports.LIST_ITEM_BLOCKS,
    _a[blocks.BLOCKS.QUOTE] = [blocks.BLOCKS.PARAGRAPH],
    _a[blocks.BLOCKS.TABLE] = [blocks.BLOCKS.TABLE_ROW],
    _a[blocks.BLOCKS.TABLE_ROW] = [blocks.BLOCKS.TABLE_CELL, blocks.BLOCKS.TABLE_HEADER_CELL],
    _a[blocks.BLOCKS.TABLE_CELL] = [blocks.BLOCKS.PARAGRAPH],
    _a[blocks.BLOCKS.TABLE_HEADER_CELL] = [blocks.BLOCKS.PARAGRAPH],
    _a);
/**
 * Array of all heading levels
 */
exports.HEADINGS = [
    blocks.BLOCKS.HEADING_1,
    blocks.BLOCKS.HEADING_2,
    blocks.BLOCKS.HEADING_3,
    blocks.BLOCKS.HEADING_4,
    blocks.BLOCKS.HEADING_5,
    blocks.BLOCKS.HEADING_6,
];
/**
 * Array of all block types that may contain text and inline nodes.
 */
exports.TEXT_CONTAINERS = __spreadArray([blocks.BLOCKS.PARAGRAPH], exports.HEADINGS, true);
/**
 * Node types before `tables` release.
 */
exports.V1_NODE_TYPES = [
    blocks.BLOCKS.DOCUMENT,
    blocks.BLOCKS.PARAGRAPH,
    blocks.BLOCKS.HEADING_1,
    blocks.BLOCKS.HEADING_2,
    blocks.BLOCKS.HEADING_3,
    blocks.BLOCKS.HEADING_4,
    blocks.BLOCKS.HEADING_5,
    blocks.BLOCKS.HEADING_6,
    blocks.BLOCKS.OL_LIST,
    blocks.BLOCKS.UL_LIST,
    blocks.BLOCKS.LIST_ITEM,
    blocks.BLOCKS.HR,
    blocks.BLOCKS.QUOTE,
    blocks.BLOCKS.EMBEDDED_ENTRY,
    blocks.BLOCKS.EMBEDDED_ASSET,
    inlines.INLINES.HYPERLINK,
    inlines.INLINES.ENTRY_HYPERLINK,
    inlines.INLINES.ASSET_HYPERLINK,
    inlines.INLINES.EMBEDDED_ENTRY,
    'text',
];
/**
 * Marks before `superscript` & `subscript` release.
 */
exports.V1_MARKS = [marks_1.default.BOLD, marks_1.default.CODE, marks_1.default.ITALIC, marks_1.default.UNDERLINE];

});

unwrapExports(schemaConstraints);
var schemaConstraints_1 = schemaConstraints.V1_MARKS;
var schemaConstraints_2 = schemaConstraints.V1_NODE_TYPES;
var schemaConstraints_3 = schemaConstraints.TEXT_CONTAINERS;
var schemaConstraints_4 = schemaConstraints.HEADINGS;
var schemaConstraints_5 = schemaConstraints.CONTAINERS;
var schemaConstraints_6 = schemaConstraints.VOID_BLOCKS;
var schemaConstraints_7 = schemaConstraints.TABLE_BLOCKS;
var schemaConstraints_8 = schemaConstraints.LIST_ITEM_BLOCKS;
var schemaConstraints_9 = schemaConstraints.TOP_LEVEL_BLOCKS;

var types = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

});

unwrapExports(types);

var nodeTypes = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

});

unwrapExports(nodeTypes);

var emptyDocument = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * A rich text document considered to be empty.
 * Any other document structure than this is not considered empty.
 */
var EMPTY_DOCUMENT = {
    nodeType: blocks.BLOCKS.DOCUMENT,
    data: {},
    content: [
        {
            nodeType: blocks.BLOCKS.PARAGRAPH,
            data: {},
            content: [
                {
                    nodeType: 'text',
                    value: '',
                    marks: [],
                    data: {},
                },
            ],
        },
    ],
};
exports.default = EMPTY_DOCUMENT;

});

unwrapExports(emptyDocument);

var helpers = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.isText = exports.isBlock = exports.isInline = void 0;


/**
 * Tiny replacement for Object.values(object).includes(key) to
 * avoid including CoreJS polyfills
 */
function hasValue(obj, value) {
    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
        var key = _a[_i];
        if (value === obj[key]) {
            return true;
        }
    }
    return false;
}
/**
 * Checks if the node is an instance of Inline.
 */
function isInline(node) {
    return hasValue(inlines.INLINES, node.nodeType);
}
exports.isInline = isInline;
/**
 * Checks if the node is an instance of Block.
 */
function isBlock(node) {
    return hasValue(blocks.BLOCKS, node.nodeType);
}
exports.isBlock = isBlock;
/**
 * Checks if the node is an instance of Text.
 */
function isText(node) {
    return node.nodeType === 'text';
}
exports.isText = isText;

});

unwrapExports(helpers);
var helpers_1 = helpers.isText;
var helpers_2 = helpers.isBlock;
var helpers_3 = helpers.isInline;

var dist = createCommonjsModule(function (module, exports) {
var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.helpers = exports.EMPTY_DOCUMENT = exports.MARKS = exports.INLINES = exports.BLOCKS = void 0;

Object.defineProperty(exports, "BLOCKS", { enumerable: true, get: function () { return blocks.BLOCKS; } });

Object.defineProperty(exports, "INLINES", { enumerable: true, get: function () { return inlines.INLINES; } });

Object.defineProperty(exports, "MARKS", { enumerable: true, get: function () { return __importDefault(marks).default; } });
__exportStar(schemaConstraints, exports);
__exportStar(types, exports);
__exportStar(nodeTypes, exports);

Object.defineProperty(exports, "EMPTY_DOCUMENT", { enumerable: true, get: function () { return __importDefault(emptyDocument).default; } });
var helpers$1 = __importStar(helpers);
exports.helpers = helpers$1;

});

unwrapExports(dist);
var dist_1 = dist.helpers;
var dist_2 = dist.EMPTY_DOCUMENT;
var dist_3 = dist.MARKS;
var dist_4 = dist.INLINES;
var dist_5 = dist.BLOCKS;

/**
 * Returns the text value of a rich text document.
 *
 * NB: This can be applied to non text node of a structured text document,
 * hence the flexible typing.
 */
function documentToPlainTextString(rootNode, blockDivisor) {
    if (blockDivisor === void 0) { blockDivisor = ' '; }
    if (!rootNode || !rootNode.content) {
        /**
         * Handles edge cases, such as when the value is not set in the CMA or the
         * field has not been properly validated, e.g. because of a user extension.
         * Note that we are nevertheless strictly type-casting `rootNode` as
         * Block | Inline. Valid rich text documents (and their branch block nodes)
         * should never lack a Node[] `content` property.
         */
        return '';
    }
    /**
     * Algorithm notes: We only want to apply spacing when a node is part of a
     * sequence. This is tricky because nodes can often be deeply nested within
     * non-semantic content arrays. For example, to get the text value of an
     * unordered list, we have to traverse like so:
     *
     * {
     *   nodeType: BLOCKS.UL_LIST,
     *   data: {},
     *   content: [
     *     {
     *       nodeType: BLOCKS.LIST_ITEM,
     *       data: {},
     *       content: [{
     *         nodeType: BLOCKS.PARAGRAPH,
     *         data: {},
     *         content: [
     *           { nodeType: 'text', data: {}, value: 'List ', marks: [] },
     *           { nodeType: 'text', data: {}, value: 'item', marks: [{ type: 'bold' }] }
     *         ]
     *       }]
     *     },
     *     {
     *       nodeType: BLOCKS.LIST_ITEM,
     *       data: {},
     *       content: [{
     *         nodeType: BLOCKS.PARAGRAPH,
     *         data: {},
     *         content: [
     *           { nodeType: 'text', data: {}, value: 'Another list item', marks: [] }
     *         ]
     *       }]
     *     },
     *     {
     *       nodeType: BLOCKS.LIST_ITEM,
     *       data: {},
     *       content: [{
     *         nodeType: BLOCKS.HR,
     *         data: {},
     *         content: [],
     *       }]
     *     },
     *     {
     *       nodeType: BLOCKS.LIST_ITEM,
     *       data: {},
     *       content: [{
     *         nodeType: BLOCKS.PARAGRAPH,
     *         data:
     *         content: [
     *           { nodeType: 'text', data: {}, value: 'Yet another list item', marks: [] }
     *         ]
     *       }]
     *     },
     *   }]
     * }
     *
     * We want there to be a space between 'List item' and 'Another list item' (to
     * denote a visual line break, which conventionally appears between non-text
     * node sequences) but not a redundant space between 'List ' and 'item'.
     * Moreover, we want just a _singular_ space between 'Another list item' and
     * 'Yet another list item' - the non-semantic HR between the two nodes should
     * not denote an additional space.
     */
    return rootNode.content.reduce(function (acc, node, i) {
        var nodeTextValue;
        if (dist_1.isText(node)) {
            nodeTextValue = node.value;
        }
        else if (dist_1.isBlock(node) || dist_1.isInline(node)) {
            nodeTextValue = documentToPlainTextString(node, blockDivisor);
            if (!nodeTextValue.length) {
                return acc;
            }
        }
        var nextNode = rootNode.content[i + 1];
        var isNextNodeBlock = nextNode && dist_1.isBlock(nextNode);
        var divisor = isNextNodeBlock ? blockDivisor : '';
        return acc + nodeTextValue + divisor;
    }, '');
}

exports.documentToPlainTextString = documentToPlainTextString;
//# sourceMappingURL=rich-text-plain-text-renderer.es5.js.map
